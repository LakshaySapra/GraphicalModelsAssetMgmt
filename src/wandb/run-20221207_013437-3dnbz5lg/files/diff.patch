diff --git a/src/GCN_LSTM.py b/src/GCN_LSTM.py
index 0110068..cf29c47 100644
--- a/src/GCN_LSTM.py
+++ b/src/GCN_LSTM.py
@@ -11,6 +11,7 @@ class GCN_LSTM(pl.LightningModule):#(nn.Module):
     def __init__(self, LSTM_input_size:int, LSTM_output_size:int=16, LSTM_num_layers:int=2, GCN_sizes:Union[None, List[int]]=None,
                  Linear_Sizes:Union[None, List[int]]=None, dropout=0.1, debug=lambda x: print(x)) -> None:
         super().__init__()
+        self.save_hyperparameters()
         
         if GCN_sizes is None:
             GCN_sizes = [16, 16]
diff --git a/src/GCN_LSTM_without_batching.py b/src/GCN_LSTM_without_batching.py
index 5a8f096..250da20 100644
--- a/src/GCN_LSTM_without_batching.py
+++ b/src/GCN_LSTM_without_batching.py
@@ -11,6 +11,7 @@ class GCN_LSTM(pl.LightningModule):#(nn.Module):
     def __init__(self, LSTM_input_size:int, LSTM_output_size:int=16, LSTM_num_layers:int=2, GCN_sizes:Union[None, List[int]]=None,
                  Linear_Sizes:Union[None, List[int]]=None, dropout=0.1, debug=lambda x: print(x)) -> None:
         super().__init__()
+        self.save_hyperparameters()
         
         if GCN_sizes is None:
             GCN_sizes = [16, 16]
@@ -69,7 +70,7 @@ class GCN_LSTM(pl.LightningModule):#(nn.Module):
             #node_features_stock = F.leaky_relu(i(node_features_stock, new_edge_index_stock, batch=batch_vector))
             #self.debug((node_features_stock.shape, new_edge_index_stock.shape, new_edge_index_stock.max().item()))
             node_features_stock = F.leaky_relu(i(node_features_stock, new_edge_index_stock))
-            print('c', (torch.isnan(node_features_stock.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
+            #print('c', (torch.isnan(node_features_stock.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
         
         self.debug('d')
         node_features_supplies_to = node_features
@@ -77,20 +78,21 @@ class GCN_LSTM(pl.LightningModule):#(nn.Module):
             #node_features_supplies_to = F.leaky_relu(i(node_features_supplies_to, new_edge_index_supplies_to, batch=batch_vector))
             #self.debug((node_features_supplies_to.shape, new_edge_index_supplies_to.shape))
             node_features_supplies_to = F.leaky_relu(i(node_features_supplies_to, new_edge_index_supplies_to))
-            print('f', (torch.isnan(node_features_supplies_to.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
+            #print('d', (torch.isnan(node_features_supplies_to.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
         
         self.debug('e')
         node_features_supplies_from = node_features
         for i in self.conv_supplies_from:
             #node_features_supplies_from = F.leaky_relu(i(node_features_supplies_from, new_edge_index_supplies_from, batch=batch_vector))
             node_features_supplies_from = F.leaky_relu(i(node_features_supplies_from, new_edge_index_supplies_from))
-            print('e', (torch.isnan(node_features_supplies_from.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
+            #print('e', (torch.isnan(node_features_supplies_from.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
         
         self.debug('f')
         out = torch.cat([node_features_stock, node_features_supplies_to, node_features_supplies_from], 1)
         
         self.debug('g')
         out = torch.squeeze(self.linear(out))
+        #print('g', (torch.isnan(out.view(time,n_stocks,-1)).sum(dim=(0, 2)) > 0.5).sum())
         
         #currently, shape batch*time*n_stocks. convert to batch, n_stocks, time
         return out.reshape(time, n_stocks).T
@@ -106,12 +108,10 @@ class GCN_LSTM(pl.LightningModule):#(nn.Module):
         sector_edge_lst = sector_edge_lst.squeeze(dim=0)
         c_edge_lst = c_edge_lst.squeeze(dim=0)
         s_edge_lst = s_edge_lst.squeeze(dim=0)
-        cur_hist_ret_df = cur_hist_ret_df.squeeze(dim=0)
+        cur_hist_ret_df = torch.nan_to_num(cur_hist_ret_df).squeeze(dim=0)
         cur_weekly_ret_df = cur_weekly_ret_df.squeeze(dim=0)
         mask = mask.squeeze(dim=0)[:, None] > 0.5
         
-        null_values = torch.logical_not(mask).squeeze().nonzero(as_tuple=True)
-        
         #cur_hist_ret_df = torch.nan_to_num(cur_hist_ret_df, nan=-float('inf'))
         predicted_rets = self.forward(cur_hist_ret_df, sector_edge_lst, s_edge_lst, c_edge_lst)
         time = predicted_rets.shape[1]
diff --git a/src/__pycache__/GCN_LSTM_without_batching.cpython-310.pyc b/src/__pycache__/GCN_LSTM_without_batching.cpython-310.pyc
index e95b70e..fdae2d4 100644
Binary files a/src/__pycache__/GCN_LSTM_without_batching.cpython-310.pyc and b/src/__pycache__/GCN_LSTM_without_batching.cpython-310.pyc differ
diff --git a/src/__pycache__/dataset.cpython-310.pyc b/src/__pycache__/dataset.cpython-310.pyc
index 888f9e4..59cbd42 100644
Binary files a/src/__pycache__/dataset.cpython-310.pyc and b/src/__pycache__/dataset.cpython-310.pyc differ
diff --git a/src/output.txt b/src/output.txt
index f516c4f..e69de29 100644
--- a/src/output.txt
+++ b/src/output.txt
@@ -1,3 +0,0 @@
-tensor([[194, 194, 194,  ...,  61,  61, 250],
-        [325, 125, 277,  ..., 250,  68,  68]]) 0
-Training: 0it [00:00, ?it/s]Training:   0%|          | 0/469 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/469 [00:00<?, ?it/s] Epoch 0:   0%|          | 0/469 [00:00<?, ?it/s]
diff --git a/src/train.py b/src/train.py
index 268cda8..4eaab9b 100644
--- a/src/train.py
+++ b/src/train.py
@@ -4,20 +4,16 @@ from GCN_LSTM_without_batching import GCN_LSTM
 import torch
 from tqdm.auto import tqdm
 import pytorch_lightning as pl
+from pytorch_lightning.loggers import WandbLogger
 
 if __name__ == '__main__':
     dataset = GNNDataset()
-    for i in tqdm(iter(dataset)):
-        pass
-    #x = next(iter(dataset))
-    #print(x[0], torch.isnan(x[0]).sum().item())
-    '''
     dataloader = DataLoader(dataset, batch_size=1, shuffle=True, num_workers=0, pin_memory=False, persistent_workers=False) #takes care of shuffling
     model = GCN_LSTM(13, debug=lambda x: None)
-    trainer = pl.Trainer(gpus=1, max_epochs=1)
+    wandb_logger = WandbLogger(project='PGM Project', log_model="all")
+    trainer = pl.Trainer(gpus=1, max_epochs=1, logger=wandb_logger)
     #trainer = pl.Trainer(max_epochs=1)
     trainer.fit(model=model, train_dataloaders=dataloader)
-    '''
 
 # Notes
 # Getting PyG to work:
